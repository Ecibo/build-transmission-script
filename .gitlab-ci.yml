default:
  image: buildpack-deps:stable
  before_script:
    - apt-get update -y
    - apt-get install -y intltool
    - chmod +x *.sh

build_libs_gcc:
  stage: build
  when: manual
  script:
    - apt-get install -y clang
    - bash ./build.sh
  variables:
    BUILD_DEPS_ONLY: 'yes'
    CC: gcc
    CXX: g++
  cache:
    key: deps_gcc
    paths: [ build_deps ]

build_gcc:
  stage: build
  when: manual
  script:
    - bash ./build.sh
  variables:
    CC: gcc
    CXX: g++
  cache:
    key: deps_gcc
    paths: [ build_deps ]
  artifacts:
    paths: [ binary ]
    expose_as: transmission build result

build_libs_clang:
  stage: build
  when: manual
  script:
    - apt-get install -y clang
    - bash ./build.sh
  variables:
    BUILD_DEPS_ONLY: 'yes'
    CC: clang
    CXX: clang++
  cache:
    key: deps_clang
    paths: [ build_deps ]

build_clang:
  stage: build
  when: manual
  script:
    - apt-get install -y clang
    - bash ./build.sh
  variables:
    CC: clang
    CXX: clang++
  cache:
    key: deps_clang
    paths: [ build_deps ]
  artifacts:
    paths: [ binary ]
    expose_as: transmission build result

build_libs_old_gcc:
  image: buildpack-deps:oldoldstable
  stage: build
  when: manual
  script:
    - bash ./build.sh
  variables:
    BUILD_DEPS_ONLY: 'yes'
    CC: gcc
    CXX: g++
  cache:
    key: deps_old_gcc
    paths: [ build_deps ]

build_old_gcc:
  image: buildpack-deps:oldoldstable
  stage: build
  when: manual
  script:
    - bash ./build.sh
  variables:
    CC: gcc
    CXX: g++
  cache:
    key: deps_old_gcc
    paths: [ build_deps ]
  artifacts:
    paths: [ binary ]
    expose_as: transmission build result

build_libs_old_clang:
  image: buildpack-deps:oldoldstable
  stage: build
  when: manual
  script:
    - apt-get install -y clang
    - bash ./build.sh
  variables:
    BUILD_DEPS_ONLY: 'yes'
    CC: clang
    CXX: clang++
  cache:
    key: deps_old_clang
    paths: [ build_deps ]

build_old_clang:
  image: buildpack-deps:oldoldstable
  stage: build
  when: manual
  script:
    - apt-get install -y clang
    - bash ./build.sh
  variables:
    CC: clang
    CXX: clang++
  cache:
    key: deps_old_clang
    paths: [ build_deps ]
  artifacts:
    paths: [ binary ]
    expose_as: transmission build result

build_libs_mingw:
  stage: build
  when: manual
  script:
    - apt-get install -y mingw-w64 binutils-mingw-w64
    - bash ./build.sh
  variables:
    BUILD_DEPS_ONLY: 'yes'
    TARGET_HOST: i686-w64-mingw32
  cache:
    key: deps_mingw
    paths: [ build_deps ]

build_mingw:
  stage: build
  when: manual
  script:
    - apt-get install -y mingw-w64 binutils-mingw-w64
    - bash ./build.sh
  variables:
    TARGET_HOST: i686-w64-mingw32
  cache:
    key: deps_mingw
    paths: [ build_deps ]
  artifacts:
    paths: [ binary ]
    expose_as: transmission build result
